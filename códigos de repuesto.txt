----------------------------------------------------------------------------------------
switch (expresion_postfix.peek()) {
                            case "|":
                                System.out.println("Operación OR");
                                break;
                            case "*":
                                System.out.println("Operación KLEENE");
                                break;
                            case "+":
                                System.out.println("Operación CERRADURA POSITIVA");
                                break;
                            default:
                                // Obteniendo dos estados de la pila de estados para la operación OR.
                                String estado1 = expresion_postfix.pop();
                                String estado2 = expresion_postfix.pop();

                                System.out.println("Estados: " + estado1 + " " + estado2);

                                // Creando las transiciones.

                                // Enviando los estados a la clase de transiciones.
                                transicion.Transicion(estado_inicial, 2, simbolo);
                        }
--------------------------------------------------------------------------------------------------
if (expresion_postfix.get(i + 1).equals(alfabeto)) {
                        // Creando un estado.
                        System.out.println("Estado 1: " + expresion_postfix.get(i + 1));
                    } else {
                        // Buscando el estado en la pila de estados.
                        estados.push(estados.search(expresion_postfix.get(i + 1)));
                    }

                    if (expresion_postfix.get(i + 2).equals(alfabeto)) {
                        // Creando un estado.
                        System.out.println("El estado es: " + estado_inicial);
                    } else {
                        // Buscando el estado en la pila de estados.
                        estados.push(estados.search(expresion_postfix.get(i + 1)));
                    }
------------------------------------------------------------------------------------------------
        // Agregando la transición del estado de aceptación al estado de acept

        // Verificando la popeada de la expresión postfix invertida.
        // while (!expresion_postfix.isEmpty()) {
        // // System.out.println("Valor de la expresión postfix invertida: " +
        // // expresion_postfix.pop());

        // // Sacando el primer estado de la pila de estados.

        // // Identificando los caracteres de la expresión postfix invertida.
        // switch (expresion_postfix.peek()) {
        // case "|":
        // System.out.println("Operación OR " + expresion_postfix.peek());

        // // String estado1 = String.valueOf(expresion_postfix.pop());
        // // String estado2 = String.valueOf(expresion_postfix.pop());

        // // System.out.println("Estado 1: " + estado1 + "Estado 2 " + estado2);

        // break;
        // case "*":
        // System.out.println("Operación KLEENE " + expresion_postfix.peek());
        // break;
        // case ".": // Concatenación
        // System.out.println("Operación CONCATENACION " + expresion_postfix.peek());
        // break;
        // case "+":
        // System.out.println("Operación CERRADURA POSITIVA " +
        // expresion_postfix.peek());
        // break;
        // default:
        // System.out.println("Caracter: " + expresion_postfix.peek());
        // break;
        // }

        // }

        // Recorriendo la expresión regular.

        // for (int i = 0; i < postfix.length(); i++) {
        // // Pusheando los caracteres de la expresion regular en el arraylist.
        // expresion_orig.add(String.valueOf(postfix.charAt(i)));

        // /*
        // * Si el caracter es diferente de | o * o +, se agrega a la pila.
        // */

        // switch (postfix.charAt(i)) { // Quitando el or. Esto se pushea al stack de
        // operaciones.
        // case '|':
        // operaciones.push(String.valueOf(postfix.charAt(i)));
        // break;
        // case '*': // Quitando el kleene. Esto se pushea al stack de operaciones.
        // operaciones.push(String.valueOf(postfix.charAt(i)));
        // break;
        // case '+': // Quitando la cerradura positiva. Esto se pushea al stack de
        // operaciones
        // operaciones.push(String.valueOf(postfix.charAt(i)));
        // break;
        // default: // Agregando el caracter de la expresión a la pila de la expresión
        // regular
        // alfabeto.push(String.valueOf(postfix.charAt(i)));
        // break;
        // }
        // }

        // // System.out.println("Expresión regular: " + alfabeto);

        // // Recorriendo la pila de la expresión regular.
        // for (int x = 0; x < alfabeto.size(); x++) {
        // // System.out.println("Caracter: " + pila.get(x));
        // // Pusheando los estados de la expresión regular a un arraylist, iniciando en
        // 0.
        // estados.add(x);
        // }

        // System.out.println("Estados: " + estados);

        // Pushear toda la expresión con las operaciones y analizar con pop las
        // expresiones. Puede ser útil tener en el stack la expresión ya analizada para
        // poder ir juntando las
        // operaciones.

        // System.out.println("Expresion regular dentro de un stack: " + expresion);
        // System.out.println("Pila: " + alfabeto);
        // System.out.println("Operaciones: " + operaciones);
        // System.out.println("Estados: " + estados);
        // System.out.println("");

        // // Llenar el ArrayList de transiciones.
        // while (pila.size() > 0) {
        // System.out.println("Simbolo: " + pila.pop());
        // System.out.println("Estado: " + estados.pop());
        // System.out.println("");
        // // System.out.println("Estado de aceptación: " + estados_aceptacion.get(e));
        // // transicion.Transicion(estados.get(e), estados_aceptacion.get(e), simbolo);
        // }

------------------------------------------------------------------------------------------

Identificando los caracteres: |, *, +, . y los caracteres de la expresión regular.

            // Identificando los caracteres de la expresión postfix invertida.
            switch (expresion_postfix.get(i)) {
                case "|":
                    // Sacando los estados de la derecha e izquierda de la operación OR.
                    System.out.println("Operación OR " + expresion_postfix.get(i));

                    // // Sacando el primer estado de la pila de estados.
                    // String estado1 = String.valueOf(expresion_postfix.get(i + 1));
                    // String estado2 = String.valueOf(expresion_postfix.get(i + 2));

                    // String estado1 = expresion_postfix.pop();
                    // String estado2 = expresion_postfix.pop();

                    // System.out.println("Estado 1: " + estado1);
                    // System.out.println("Estado 2: " + estado2);

                    // Enviando los estados al método or.
                    // OR(estado1, estado2, simbolo);

                    break;
                case ".":

                    System.out.println("Operación CONCATENACION " + expresion_postfix.get(i));
                    // Extrayendo los estados de la derecha e izquierda de la operación
                    // CONCATENACION.
                    // elemento1 = String.valueOf(expresion_postfix.get(i - 1));
                    // elemento2 = String.valueOf(expresion_postfix.get(i + 1));

                    // System.out.println("Estado 1: " + estado3);
                    // System.out.println("Estado 2: " + estado4);

                    elemento1 = expresion_postfix.pop();
                    elemento2 = expresion_postfix.pop();

                    System.out.println("Elemento 1: " + elemento1);
                    System.out.println("Elemento 2: " + elemento2);

                    // Enviando los estados al método concatenación.
                    // Concatenacion(estado_inicial, fin, estado3, estado4);
                    break;
                case "*":

                    // Sacando elemento a operar.
                    elemento1 = expresion_postfix.pop();

                    System.out.println("Elemento a operar: " + elemento1);

                    String operador = expresion_postfix.pop(); // Sacando el operador.

                    System.out.println("Operación KLEENE " + operador);

                    // Enviando el estado inicial y el símbolo al método OperacionKleene.
                    opKleene(estado_inicial, elemento1, simbolo);
                    break;
                case "+":
                    System.out.println("Operación POSITIVA " + expresion_postfix.get(i));
                    break;
                default:
                    System.out.println("Elemento " + expresion_postfix.get(i));

                    // Sacando el elemento a operar.
                    elemento1 = expresion_postfix.pop();

                    String res = OperacionDefault(estado_inicial, elemento1); // Enviando el estado
                                                                              // inicial y el símbolo al
                                                                              // método OperacionDefault.
                    expresion_resultante.push(res); // Insertando el resultado de la operación default al Stack.
                    System.out.println("Expresión resultante: " + expresion_postfix);
                    break;
            }

----------------------------------------------------------------------
  // Juntando los estados de aceptación de la parte de arriba con el estado
        // inicial de la parte de abajo.

        /*
         * Stack de estados iniciales:
         * Último estado inicial. Pertenece al último AFN temporal.
         * 
         * 
         * Stack de estados finales:
         * Último estado final. Pertenece al último AFN temporal.
         * 
         * Crear un nuevo estado.
         * Propiedades:
         * 1. Es el estado inicial del AFN de la derecha.
         * 2. Es el estado final del AFN de la izquierda.
         * 3. Conexión con las transiciones del AFN de la izquierda y derecha.
         */

        elemento1.getId();
        elemento2.getId();

        elemento1.setInicio(true);

        Estado nuevo = new Estado(elemento1.getId());

        System.out.println("Final del elemento 1: " + elemento1.getInicio());
        System.out.println("Inicial del elemento 2: " + elemento2.getInicio());

        System.out.println("El nuevo estado es: " + nuevo.getId());

        // Buscar el estado final del AFN de la izquierda en el ArrayList de
        // transiciones.

        transiciones.get(elemento1.getId());

        // Obteniendo los índices de las transiciones que se van a modificar.
        int indice1 = elemento1.getId();
        int indice2 = elemento2.getId();

        // Imprimiendo lista de transiciones.
        for (int i = 0; i < transiciones.size(); i++) {
            transiciones.get(i).replaceA(elemento1, elemento2);
            transiciones.add(transiciones.get(i));
            System.out.println("Transiciones: " + transiciones.get(i).vis());
        }

---------------------------------------------------------
List<Transiciones> lista = new CopyOnWriteArrayList(transiciones); // Prueba.
    Iterator<Transiciones> iterador = lista.iterator(); // Iterador de la lista.

        while (iterador.hasNext()) {
            Transiciones transicion = iterador.next();
            String s = transicion.getSimbolo();
            if (transicion.getDe().equals(elemento2)) {
                System.out.println("Transición del estado inicial del segundo: " + transicion.vis());
                transiciones.remove(transicion);
                Transiciones tr = new Transiciones(elemento1, transicion.getA(), s);
                System.out.println("Transición nueva: " + tr.vis());
                transiciones.add(tr);
            }
        }

--------------------------------------------------------------------------------------------------------------------------------
for (int i = 0; i < transiciones.size(); i++) {
            System.out.println(transiciones.get(i).toString());

            // Calculando todas las transiciones del estado inicial que se pueden hacer con
            // &.
            // if (transiciones.get(i).getSimbolo().equals("&")) {
            // cerraduraInicial.add(transiciones.get(i).getA());
            // }

            // Validando si entre la transición actual y la siguiente hay una transición con
            // &.

            // Character simboloActual = transiciones.get(i).getSimbolo().toCharArray()[0];

            // if (transiciones.get(i).getSimboloTransicion().equals("&")
            // && !alfabeto.contains(simboloActual.toString())
            // && transiciones.get(i).getTransicionSiguiente().getSimboloTransicion()
            // .equals("&")
            // && transiciones.get(i).getTransicionAnterior().getSimbolo()
            // .contains("&")) {
            // {
            // System.out.println("Transición: " + transiciones.get(i));

            // }

            Character simboloActual = transiciones.get(i).getSimbolo().toCharArray()[0];

            // Volviendo el simbolo actual a String.
            String simboloActualString = simboloActual.toString();

            // // Validando si la transición actual y la siguiente tienen el mismo símbolo.

            // if
            // (transiciones.get(i).getTransicionAnterior().getSimboloTransicion().equals("&")
            // &&
            // transiciones.get(i).getTransicionSiguiente().getSimboloTransicion().equals("&"))
            // {
            // // Validando que el símbolo actual no sea un símbolo del alfabeto.
            // if (!transiciones.get(i).getTransicionSiguiente().getSimboloTransicion()
            // .contains(alfabeto.toString())
            // && !transiciones.get(i).getTransicionAnterior().getSimboloTransicion()
            // .contains(alfabeto.toString())) {
            // cerraduraInicial.add(transiciones.get(i).getDe());
            // }

            // }

            // Impriendo la cerradura del estado inicial.
            // System.out.println("Cerradura del estado inicial: " + cerraduraInicial);
        }
--------------------------------------------------------------------------------------------------------------------------------

If para verificar si el estado ya está en la lista temporal:

if (!estadosAFD.contains(cerraduraResult)) {
                    listaTemporal.add(cerraduraResult);
                } else {
                    System.out.println("Ya existe el estado");
                }


------------------------------------------------------------------------------------------------------------------------------------
   // // Calculando el movimiento de los estados alcanzados.
        // for (int i = 0; i < alfabetoAFD.size(); i++) {
        // estadosAlcanzados = mover(cerraduraResult, alfabetoAFD.get(i));
        // // Calculando la cerradura de cada estado alcanzado.
        // for (int j = 0; j < estadosAlcanzados.size(); j++) {
        // cerraduraResult = cerradura(estadosAlcanzados.get(j));
        // // Imprimiendo la cerradura de cada estado alcanzado.
        // System.out.println("Cerradura de cada estado alcanzado: " +
        // cerraduraResult.toString());
        // }

        // System.out.println();
        // }

        // Si con el primer e-closure se llegó a un estado final, se agrega a la lista
        // de estados de aceptación.
        // for (Estado accept : estadosFinales) {
        // if (cerraduraInicial.contains(accept)) {
        // estados_aceptacion.add(a);
        // }
        // }

        // // Imprimiendo los estados de aceptación.
        // System.out.println("Estados de aceptación: " +
        // estados_aceptacion.toString());
------------------------------------------------------------------------------------------------------------------------------------
// Obteniendo la lista de estados del HasMap y poniéndola en true.
        for (Map.Entry<ArrayList<Estado>, Boolean> entry : cerraduraResult.entrySet()) {
            if (entry.getValue() == false) {
                entry.setValue(true);
            }

            System.out.println("Primer estado del HashMap: " + entry.getKey().toString());
        }

------------------------------------------------------------------------------------------------------------------------------------

            // Mientras haya un ArrayList en el HashMap con false, se envía al move.
            // Obteniendo cada símbolo del alfabeto.
            for (int i = 0; i < alfabetoAFD.size(); i++) {

                // Obteniendo cada ArrayList del HashMap.
                for (Map.Entry<ArrayList<Estado>, Boolean> entry : cerraduraResult.entrySet()) {

                    // Obteniendo el valor del ArrayList.
                    ArrayList<Estado> valor = entry.getKey();

                    // Obteniendo el valor booleano del ArrayList.
                    Boolean valorBooleano = entry.getValue();

                    // Si el valor booleano es false, se envía al move.
                    if (valorBooleano == false) {

                        System.out.println("Valor a enviar al move: " + valor.toString() + " con el símbolo: "
                                + alfabetoAFD.get(i) + "");

                        // Se envía el ArrayList al move.
                        mover(valor, alfabetoAFD.get(i));

                        // Guardando el resultado de mover en un ArrayList temporal.
                        listaTemporal.add(mover(valor, alfabetoAFD.get(i)));

                        // Por cada ArrayList en la lista temporal, se envía a la cerradura.
                        for (int j = 0; j < listaTemporal.size(); j++) {

                            // Por cada elemento en el ArrayList, se envía a la cerradura.
                            for (int k = 0; k < listaTemporal.get(j).size(); k++) {
                                cerradura(listaTemporal.get(j).get(k));

                                // Guardando el resultado de la cerradura en el HashMap.
                                cerraduraResult.put(cerradura(listaTemporal.get(j).get(k)), false);
                            }
                        }

                    } // Al terminar el for, se cambia el valor booleano del ArrayList a true.
                    else {
                        cerraduraResult.put(valor, true);
                    }

                }

                // // Imprimiendo el HasMap.
                // System.out.println("HashMap: " + cerraduraResult.toString());

            }

---------------------------------------------------------------------------------------------------------
estadoInicial = it.next();

            System.out.println("Estado inicial del AFD: " + estadoInicial.toString());

            // Una vez se movió el estado, se cambia el valor de la llave a true.
            cerraduraResult.put(estadoInicial, true);

            // Obteniendo el alfabeto del AFD.
            for (int i = 0; i < alfabetoAFD.size(); i++) {
                System.out.println("Símbolo del AFD: " + alfabetoAFD.get(i));

                // Obteniendo el conjunto de estados alcanzados por medio de mover.
                ArrayList<Estado> conjuntoEstados = mover(estadoInicial, alfabetoAFD.get(i));

                System.out.println("Conjunto de estados alcanzados por mover: " + conjuntoEstados.toString());

                // Calculando la cerradura de cada estado del conjunto de estados.
                for (int j = 0; j < conjuntoEstados.size(); j++) {
                    ArrayList<Estado> cerraduraEstados = cerradura(conjuntoEstados.get(j));
                    System.out.println(
                            "Cerradura de cada estado del conjunto de estados: " + cerraduraEstados.toString());
                }

                // Si el conjunto de estados no está en el HashMap, entonces se agrega.
                if (!cerraduraResult.containsKey(conjuntoEstados)) {
                    cerraduraResult.put(conjuntoEstados, false);
                }
            }

            // Imprimiendo el HashMap.
            System.out.println("HashMap: " + cerraduraResult.toString());
-------------------------------------------------------------------------------------------------
// Imprimiendo el resultado de move.
                System.out.println("Resultado de move: " + resultado.toString());

                // Recorriendo el resultado de move.
                for (int i = 0; i < resultado.size(); i++) {

                    // Obteniendo el estado.
                    Estado estado = resultado.get(i);

                    // Imprimiendo el estado.
                    System.out.println("Estado: " + estado.toString());

                    // Obteniendo la cerradura del estado.
                    ArrayList<Estado> cerraduraEstado = cerradura(estado);

                    // Imprimiendo la cerradura del estado.
                    System.out.println("Cerradura del estado: " + cerraduraEstado.toString());

                    // Si el HashMap de estados alcanzados no contiene la cerradura del estado,
                    // entonces
                    // se agrega.
                    if (!cerraduraResult.containsKey(cerraduraEstado)) {

                        // Agregando la cerradura del estado al HashMap de estados alcanzados.
                        cerraduraResult.put(cerraduraEstado, false);

                        // Imprimiendo el HashMap de estados alcanzados.
                        System.out.println("Estados alcanzados: " + cerraduraResult.toString());

                    }

                }
--------------------------------------------------------------------------------------------------------
// Imprimiendo el HashMap de estados alcanzados.
        // System.out.println("Estados alcanzados: " + cerraduraResult.toString());
        // Recorriendo el HashMap de estados alcanzados.
        for (Map.Entry<List<Estado>, Boolean> entry : cerraduraResult.entrySet()) {

            // Obteniendo el valor de la llave.
            List<Estado> llave = entry.getKey();

            // Obteniendo el valor del valor.
            Boolean valor = entry.getValue();

            // Imprimiendo el valor de la llave.
            System.out.println("Llave: " + llave.toString());

            // Imprimiendo el valor del valor.
            System.out.println("Valor: " + valor.toString());

            // Si el valor es false, entonces se procesa el estado.
            if (valor == false) {

                // Se obtiene el conjunto de estados alcanzados en el AFN por medio del primer
                // símbolo del alfabeto partir del estado inicial del AFD.

                for (int i = 0; i < alfabetoAFD.size(); i++) {
                    System.out.println("Símbolo del AFD: " + alfabetoAFD.get(i));
                    ArrayList<Estado> resultado = mover(llave, alfabetoAFD.get(i));

                    // Imprimiendo el resultado de mover.
                    System.out.println("Resultado de mover: " + resultado.toString());

                    // Se obtiene la cerradura de cada uno de los estados del conjunto de estados
                    // alcanzados.
                    // Recorriendo el resultado de move.
                    for (int j = 0; j < resultado.size(); j++) {

                        // Obteniendo el estado.
                        Estado estado = resultado.get(j);

                        // Imprimiendo el estado.
                        System.out.println("Estado: " + estado.toString());

                        // Obteniendo la cerradura del estado.
                        ArrayList<Estado> cerraduraEstado = cerradura(estado);

                        // Imprimiendo la cerradura del estado.
                        System.out.println("Cerradura del estado: " + cerraduraEstado.toString());

                        // Si el HashMap de estados alcanzados no contiene la cerradura del estado,
                        // entonces
                        // se agrega.
                        if (!cerraduraResult.containsKey(cerraduraEstado)) {

                            // Agregando la cerradura del estado al HashMap de estados alcanzados.
                            cerraduraResult.put(cerraduraEstado, false);

                            // Imprimiendo el HashMap de estados alcanzados.
                            System.out.println("Estados alcanzados: " + cerraduraResult.toString());

                        }

                    }
                }

            }

            // Cambiando el valor de la llave a true.
            cerraduraResult.put(llave, true);

            // Imprimiendo el HashMap de estados alcanzados.
            System.out.println("Estados alcanzados luego de procesar el primer estado: " + cerraduraResult.toString());

        }
----------------------------------------------------------------------------------------------------------------

 // Se obtiene el resultado de e-closure.
                            cerradura(move.get(j).get(k));

                            // Esto devuelve idealmente un ArrayList de ArrayLists, dado que hace el move y
                            // el e-closure con cada símbolo del alfabeto.

                            System.out.println("eClosure: " + cerradura(move.get(j).get(k)));

                            // Haciendo una lista de ArrayLists para guardar los resultados de e-closure por
                            // cada símbolo del alfabeto.
                            eClosure_List.addAll(cerradura(move.get(j).get(k)));

                            // Si hay un estado repetido, entonces no se agrega.
                            if (listaTemporal.contains(cerradura(move.get(j).get(k)))) {
                                System.out.println("Estado repetido");
                            } else {
                                // Se agrega el estado a la lista temporal.
                                listaTemporal.add(cerradura(move.get(j).get(k)));
                            }

                            // listaTemporal.add(cerradura(move.get(j).get(k)));
